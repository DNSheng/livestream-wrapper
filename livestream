#!/bin/bash

# A wrapper for livestreamer
# Supply your API token in the config file as explained by livestreamer's manual
# Dependencies:
#	- livestreamer
#
# Alias notes:
# 	- Aliases must not include '.'
#	- Aliases are case-sensitive
#	- Aliases are unique
#
# DNSheng, 2017

# TODO:
#	- Display title of streams (not possible just using livestreamer)

# Location of channel list
channel="/home/$USER/.config/livestreamer/channels.txt"

# Help
help () {
	echo ""
	echo "livestream [COMMAND] [ARGUMENTS]"
	echo ""
	echo "An custom wrapper for livestreamer."
	echo "Options:"
	echo "	help	- Display help information."
	echo "	add	- Add an alias, or overwite an existing one [ALIAS] [CHANNEL_URL]"
	echo "	remove	- Remove an alias. [ALIAS]"
	echo "	list	- List all aliases and corresponding URLs"
	echo "	ping	- Ping all aliased channels, or a specific alias/channel"
	echo "		  for online availability"
	echo ""
	echo "Uses like livestreamer normally, but with added functionality (aliasing, pinging, etc.)"
	echo "livestream [CHANNEL] [QUALITY]"
	echo "If no [QUALITY] value entered, defaults to 'best'"
	echo "Enter the alias/url and quality like normal."
	echo "Currently, additional arguments do not carry over."
	echo "The alias file is located at $channel"
	echo ""
	echo "NOTE: - As additional arguments do not carry over, the"
	echo "        config file for livestreamer must be set."
	echo "      - The period character '.' cannot be included in an alias."
	echo "      - Aliases are unique and case-sensitive."
	echo ""
}

# Add a channel and alias
add () {
	# Create new channel list if none found
	if [ ! -e $channel ]; then
		echo "Channel list does not exist, creating new list..."
		touch $channel
		echo "# Automatically generated channel list" >> $channel
		echo -e "# Format: [ALIAS] [CHANNEL URL]\n" >> $channel
	fi

	#Check if alias exists
	match $1
	if [[ $? == 1 ]]; then
		# Alias exists, overwrite prompt
		echo "Warning: Alias already exists. Overwrite? (Y/N)"
		read input
		if [[ $input == "Y" ]] || [[ $input == "y" ]]; then
			remove $1
			echo "Adding alias $1 to $2..."
			echo "$1 $2" >> $channel
		else
			echo "Exiting..."
		fi
	else
		# Check if alias contains '.'
		defense=$(echo $1 | grep '\.')
		if [[ $defense != "" ]]; then
			echo "Warning: Invalid alias (contains '.' character)"
			echo "Aborting..."
		else
			echo "$1 $2" >> $channel
		fi
	fi
}

# Remove a channel and alias
remove() {
	#Check if alias exists
	match $1
	if [[ $? == 0 ]]; then
		# Alias not found
		echo "Alias not found, exiting."
	else
		# Alias found, remove
		#echo "Removing $1..."
		sed -i "/$1/d" $channel
	fi
}

# List all channels and their aliases
list() {
	warning=0
	affected=""

	printf "\n%-10s %-30s\n" "[ALIAS]" "[URL]"
	echo "----------------------------------------------------"

	while read -r line; do
		if [[ ${line:0:1} != "#" ]] && [[ $line != "" ]]; then
			alias=$(echo $line | cut -d " " -f 1)

			# Check for a '.' character in each alias
			defense=$(echo $alias | grep '\.')
			if [[ $defense != "" ]]; then
				warning=1
				# Append alias to list of affected
				affected="$affected $alias"
			fi

			url=$(echo $line | cut -d " " -f 2)
			printf "%-10s %-30s\n" "$alias" "$url"
		fi
	done < $channel
	
	if [[ $warning != 0 ]]; then
		echo ""
		echo "Warning: Invalid alias(es) found:$affected"
		echo "Please remove from the list"
	fi
	echo ""
}

# Scan through specific channel (if specified), or all channels, checking for activity
ping () {
	echo -e "\nOnline status:"
	echo "----------------------------------------------------"

	if [[ $1 != "" ]]; then
		# Ping specific alias/url
		determine $1
		if [[ $? == 0 ]]; then
			# Ping url
			get_status $1
		else
			# Get alias and ping
			# Check existence of alias
			match $1
			if [[ $? == 0 ]]; then
				echo "Alias not found"
			else
				while read -r line; do
					if [[ ${line:0:1} != "#" ]] && [[ $line != "" ]]; then
						alias=$(echo $line | cut -d " " -f 1)
						if [[ $alias == $1 ]]; then
							url=$(echo $line | cut -d " " -f 2)
							get_status $url
						fi
					fi
				done < $channel
			fi
		fi
	else
		# Ping all
		while read -r line; do
			if [[ ${line:0:1} != '#' ]] && [[ $line != "" ]]; then
				alias=$(echo $line | cut -d " " -f 1)
				url=$(echo $line | cut -d " " -f 2)
				get_status $url
			fi
		done < $channel
	fi
	echo ""
}

# Print the status of the channel
get_status() {
	error=$(livestreamer -j $1 | grep error)
	if [[ $error != "" ]]; then
		printf "\e[0;31m%-14s\e[0m %-10s %-30s\n" "OFFLINE" "$alias" "$url"
	else
		printf "\e[0;32m%-14s\e[0m %-10s %-30s\n" "ONLINE" "$alias" "$url"
	fi
}

# Given an alias, read through list and return channel url
# Returns:
#		0 - Alias not found
#		1 - Alias found
match() {
	#echo "Matching with $1"
	while read -r line; do
		if [[ ${line:0:1} != "#" ]] && [[ $line != "" ]]; then
			alias=$(echo $line | cut -d " " -f 1)
			if [[ $alias == $1 ]]; then
				#echo "MATCH FOUND"
				url=$(echo $line | cut -d " " -f 2)
				return 1 
			fi
		fi
	done < $channel
	return 0
}

# Default behaviour, check if unknown command entered. Else, start stream
defensive() {
	match $1
	if [[ $? == 0 ]]; then
		echo "Error: Unknown command"
		echo -e "Use the \"help\" command to display all commands."
	else
		stream $1 $2
	fi
}

# Check for arguments and alias/url, start stream
stream() {
	if [[ $# -lt 1 ]]; then
		echo "No channel argument or alias supplied"
	else
		# Check if it is an alias or url given
		determine $1
		val=$?

		# Check if quality argument given, default 'best'
		if [[ $# == 1 ]]; then
			quality="best"
		else
			quality=$2
		fi
		
		if [[ $val == 0 ]]; then
			livestreamer $1 $quality
		else
			while read -r line; do
				if [[ ${line:0:1} != "#" ]] && [[ $line != "" ]]; then
					alias=$(echo $line | cut -d " " -f 1)
					if [[ $alias == $1 ]]; then
						url=$(echo $line | cut -d " " -f 2)
					fi
				fi
			done < $channel
			livestreamer $url $quality
		fi
	fi
}

# Distinguish between url and alias
# Return:
#		0 - URL
#		1 - Alias
determine() {
	url=$(echo $1 | grep '\.')
	if [[ $url == "" ]]; then
		return 1
	else
		return 0
	fi
}

# Main program
case $1 in
	"ping"		) ping $2;;
	"add"		) add $2 $3;;
	"remove"	) remove $2;;
	"list"		) list;;
	"help"		) help;;
	*		) defensive $1 $2;;
esac
