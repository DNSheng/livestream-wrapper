#!/bin/bash

# A wrapper for livestreamer
# Supply your API token in the config file as explained by livestreamer's manual
# Dependencies:
#	- livestreamer
#	- GNU Parallel
#
# Alias notes:
# 	- Aliases must not include special characters (alphanum only)
#	- Aliases are case-sensitive
#	- Aliases are unique
#	- Aliases can not have same name as commands
#
# DNSheng, 2017
#
# NEW:
#	- Additional option arguments now pass to livestreamer
#
# TODO:
#	- Display title of streams (not possible just using livestreamer)
#	- Prioritize ONLINE streams to top of list when pinging
#	- Strengthen alphanum alias restriction

# Location of channel list
channel="/home/$USER/.config/livestreamer/channels.txt"

# Help
help () {
	echo ""
	echo "livestream [OPTIONS] [COMMAND] [ARGUMENTS]"
	echo ""
	echo "An custom wrapper for livestreamer."
	echo "Options:"
	echo "	help	- Display help information."
	echo "	add	- Add an alias, or overwite an existing one."
	echo "	remove	- Remove a single alias, or all aliases associated with a URL."
	echo "	list	- List all aliases and corresponding URLs."
	echo "	ping	- Ping all aliased channels, or a specific alias/channel"
	echo "		  for online availability."
	echo ""
	echo "Works like livestreamer normally, but with added functionality (aliasing, pinging, etc.)"
	echo "If no quality value is entered, default of 'best' quality is used."
	echo "Enter the alias/url and quality like with livestreamer (in order, after all options)."
	echo "The alias file is located at $channel"
	echo ""
	echo "NOTE: - Set the config file for livestreamer to enter less commands"
	echo "      - Aliases are unique, case-sensitive, and must be alpha-numeric"
	echo ""
}

# Add a channel and alias
# Input:	[Alias URL]
add () {
	# Create new channel list if none found
	if [ ! -e $channel ]; then
		echo "Channel list does not exist, creating new list..."
		touch $channel
		echo "# Automatically generated channel list" >> $channel
		echo -e "# Format: [ALIAS] [CHANNEL URL]\n" >> $channel
	fi
	
	# Check if two arguments included
	if [[ $# -lt 2 ]]; then
		echo "Insufficient arguments..."
		exit
	fi

	# Check if alias exists
	_match $1
	if [[ $? == 2 ]]; then
		# Alias exists, overwrite prompt
		echo "Warning: Alias already exists. Overwrite? (Y/N)"
		read input
		if [[ $input == "Y" ]] || [[ $input == "y" ]]; then
			remove $1
			echo "Adding alias $1 to $2..."
			echo "$1 $2" >> $channel
		else
			echo "Exiting..."
		fi
	else
		# Check if alias contains '.'
		# TODO: Strengthen for alphanum only
		defense=$(echo $1 | grep '\.')
		if [[ $defense != "" ]]; then
			echo "Warning: Invalid alias (contains '.' character)"
			echo "Aborting..."
		else
			echo "$1 $2" >> $channel
		fi
	fi
}

# Remove a channel and alias
# Input:	Alias/URL
remove() {
	_match $1
	return_code=$?
	if [[ $return_code -eq 1 ]]; then 
		# This is really hacky, might not work for some sites
		hack=$(echo $1 | cut -d "/" -f 2)
		# Added '$' for end of line, otherwise every URL with that keyword is deleted
		sed -i "/$hack$/d" $channel
	elif [[ $return_code -eq 2 ]]; then
		sed -i "/$1 /d" $channel
	else
		echo "Alias/URL not found, exiting..."
	fi
}

# List all channels and their aliases
list() {
	warning=0
	affected=""

	printf "\n%-10s %-30s\n" "[ALIAS]" "[URL]"
	echo "----------------------------------------------------"

	while read -r line; do
		if [[ ${line:0:1} != "#" ]] && [[ $line != "" ]]; then
			alias=$(echo $line | cut -d " " -f 1)

			# Check for a '.' character in each alias
			# TODO: Check for all non-alphanum aliases
			defense=$(echo $alias | grep '\.')
			if [[ $defense != "" ]]; then
				warning=1
				# Append alias to list of affected
				affected="$affected $alias"
			fi

			url=$(echo $line | cut -d " " -f 2)
			printf "%-10s %-30s\n" "$alias" "$url"
		fi
	done < $channel
	
	if [[ $warning != 0 ]]; then
		echo ""
		echo "Warning: Invalid alias(es) found: $affected"
		echo "Please remove from the list"
	fi
	echo ""
}

# Scan through specific channel (if specified), or all channels, checking for activity
ping () {
	# TODO: Print error if invalid before the table below
	echo -e "\nOnline status:"
	printf "%-14s %-10s %-30s\n" "[STATUS]" "[ALIAS]" "[URL]"
	echo "----------------------------------------------------"

	if [[ $1 != "" ]]; then
		# Ping specific alias/url
		_determine $1
		if [[ $? == 0 ]]; then
			# Ping url
			# Get alias (if it exists)
			_alias_for_url $1
			if [[ $? == 0 ]]; then
				alias="[NONE]"
			fi
			_get_status $1
		else
			# Get alias and ping
			# Check existence of alias
			_match $1
			if [[ $? == 0 ]]; then
				echo "Alias not found: $1"
			else
				_url_for_alias $1
				_get_status $url
			fi
		fi
	else
		# Create a list of [ALIAS] and [URL]
		list=""
		while read -r line; do
			if [[ ${line:0:1} != "#" ]] && [[ $line != "" ]]; then
				alias=$(echo $line | cut -d " " -f 1)
				url=$(echo $line | cut -d " " -f 2)
				if [[ $list == "" ]]; then
					list="${alias} ${url}"
				else
					list="${list}\n${alias} ${url}"
				fi
			fi
		done < $channel
		# Export get_all_status() and _get_status() (due to dependency)
		export -f _get_status
		export -f _get_all_status
		# Use the list and feed to get_all_status in parallel
		# Tinker with -j# value
		echo -e "${list}" | parallel -j0 -k _get_all_status
	fi
	echo ""
}

# Get alias for URL from list
# Input:	URL
# Output:
#		0 - Alias not found
#		1 - Alias found
_alias_for_url() {
	while read -r line; do
		if [[ ${line:0:1} != "#" ]] && [[ $line != "" ]]; then
			url=$(echo $line | cut -d " " -f 2)
			if [[ $url == $1 ]]; then
				alias=$(echo $line | cut -d " " -f 1)
				return 1
			fi
		fi
	done < $channel
	return 0
}

# Get URL for alias from list
# Input:	Alias
# Output:	0 - URL not found
#		1 - URL found
_url_for_alias() {
	while read -r line; do
		if [[ ${line:0:1} != "#" ]] && [[ $line != "" ]]; then
			alias=$(echo $line | cut -d " " -f 1)
			if [[ $alias == $1 ]]; then
				url=$(echo $line | cut -d " " -f 2)
				return 1
			fi
		fi
	done < $channel
	return 0
}

# Get all status
# Input:	[Alias URL]
_get_all_status() {
	alias=$(echo $1 | cut -d " " -f 1)
	url=$(echo $1 | cut -d " " -f 2)

	_get_status $url
}

# Print the status of the channel
# Input:	URL
_get_status() {
	error=$(livestreamer -j $1 | grep error)
	if [[ $error != "" ]]; then
		printf "\e[0;31m%-14s\e[0m %-10s %-30s\n" "OFFLINE" "$alias" "$url"
	else
		printf "\e[0;32m%-14s\e[0m %-10s %-30s\n" "ONLINE" "$alias" "$url"
	fi
}

# Given either a URL or alias, check for existence in list
# Input:	URL/Alias
# Output:	0 - Neither found
#		1 - URL found
#		2 - Alias found
#		3 - Tag found		(CURRENTLY UNUSED)
_match() {
	while read -r line; do
		if [[ ${line:0:1} != "#" ]] && [[ $line != "" ]]; then
			alias=$(echo $line | cut -d " " -f 1)
			url=$(echo $line | cut -d " " -f 2)
			if [[ $url == $1 ]]; then
				return 1
			fi
			if [[ $alias == $1 ]]; then
				return 2
			fi
		fi
	done < $channel
	return 0
}

# Default behaviour, check if unknown command entered. Else, start stream
# Input:	[URL/Alias/Command Quality]
defensive() {
	# Check for # of args
	if [[ $# == 1 ]]; then
		# Either an command, option, or alias/URL, default quality best
		_match $1
		match_val=$?
		# TODO: Strengthen for alphanum aliases
		url=$(echo $1 | grep '\.')
		# If it begins with a dash, then it's a livestreamer arg
		first=${1:0:1}
		if [[ $match_val == 0 ]] && [[ $url == "" ]] && [[ $first != "-" ]]; then
			# Not an alias, URL, or livestreamer arg, and didn't go through the case
			# Therefore, unknown command
			echo "Error: Unknown command"
			echo e "Use the \"help\" command to display all commands."
		else
			_new_stream $1 $2 
		fi
	else
		# Multiple args, could be anything
		_new_stream $@
	fi
}

# EXPERIMENTAL
# Check for arguments and alias/url, start stream
# Input:	[(Livestreamer Args/URL/Alias) {Quality}]

_new_stream() {
	if [[ $2 == "" ]]; then
		# 1 arg, check if stream or livestreamer arg
		if [[ $first == "-" ]]; then
			# Is livestream arg
			# Give help info for wrapper too
			case $1 in
				"--help"	) _help_disclaimer;;
				"-h"		) _help_disclaimer;;
			esac
			livestreamer $1
		else
			# Default to best quality
			quality="best"
			# Determine if alias, get URL and stream
			_determine $1
			is_alias=$?
			if [[ $is_alias == 0 ]]; then
				livestreamer $1 $quality
			else
				_url_for_alias $1
				livestreamer $url $quality
			fi
		fi
	else
		# Multiple args
		# Get last 2 args
		tail_arg=${@: -1}		# Last arg
		prev_arg=${@: -2:1}		# Second last arg

		_match $prev_arg
		mat_val=$?
		_determine $prev_arg
		det_val=$?

		if [[ $mat_val == 1 ]] && [[ $det_val == 0 ]]; then
			# $prev_arg is url, $tail_arg is quality
			livestreamer $@
		elif [[ $mat_val == 0 ]] && [[ $det_val == 1 ]]; then
			# $prev_arg not channel/url, $tail_arg is
			# Default to best quality
			# Check if $tail_arg is URL or alias, act accordingly
			_match $tail_arg
			if [[ $? == 1 ]]; then
				livestreamer $@ best
			else
				_url_for_alias $tail_arg
				# Cut alias from args
				set -- "${@:1:$(($#-1))}"
				livestreamer $@ $url best
			fi
		else
			# $prev_arg is alias, $tail_arg is quality
			_url_for_alias $prev_arg
			set -- "${@:1:$(($#-2))}"
			livestreamer $@ $url $tail_arg
		fi
	fi
}

# Info on wrapper help if livestreamer help is called
_help_disclaimer(){
	echo "--------------------------------------------------------------------------"
	echo "For help with the livestreamer-wrapper is needed, call the "help" command:"
	echo ""
	echo -e "\tlivestream help"
	echo "--------------------------------------------------------------------------"
	echo ""
}

# Check for arguments and alias/url, start stream
# Input:	[URL/Alias {Quality}]
_stream() {
	if [[ $# -lt 1 ]]; then
		echo "No channel argument or alias supplied"
	else
		# Check if it is an alias or url given
		_determine $1
		is_alias=$?

		# Check if quality argument given, default 'best'
		if [[ $# == 1 ]]; then
			quality="best"
		else
			quality=$2
		fi
		
		if [[ $is_alias == 0 ]]; then
			livestreamer $1 $quality
		else
			_url_for_alias $1
			livestreamer $url $quality
		fi
	fi
}

# Distinguish between url and alias (URLs have a '.' char)
# Input:	URL/Alias
# Output:
#		0 - URL
#		1 - Alias
_determine() {
	url=$(echo $1 | grep '\.')
	if [[ $url == "" ]]; then
		return 1
	else
		return 0
	fi
}

# Main program
case $1 in
	"ping"		) ping $2;;
	"add"		) add $2 $3;;
	"remove"	) remove $2;;
	"list"		) list;;
	"help"		) help;;
	*		) defensive $@;;
esac
